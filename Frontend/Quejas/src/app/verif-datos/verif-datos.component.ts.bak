import { Component, OnInit } from '@angular/core';
import { CompermanenteService } from '../comunicacion-permanente/compermanente.service'
import { timer } from 'rxjs';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { Inject } from '@angular/core';
import { VerifDatosService } from '../verif-datos/verif-datos.service';
import { QuejaService } from '../shared/queja.service';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';

@Component({
  selector: 'app-verif-datos',
  templateUrl: './verif-datos.component.html',
  styleUrls: ['./verif-datos.component.css'],
  animations: [
		trigger('EnterLeave', [
	  state('flyIn', style({ transform: 'translateX(0)' })),
	  transition(':enter', [
		style({ transform: 'translateX(-100%)' }),
		animate('100ms 150ms ease-in')
	  ]),
	  transition(':leave', [
		animate('300ms ease-out', style({ transform: 'translateX(-100%)' }))
	  ])
	])]
})
export class VerifDatosComponent implements OnInit {
  lst_int;lbl_numqueja;lst_queja;flagformvisible;linkdescription;
  flagUpdateInfo: boolean;
  flagIntUsuario: boolean;
  flagIntList: boolean;
  flagInfoError: boolean;
  flagEmailSent: boolean;
  flagEmailError: boolean;
  loaderror: boolean;
  flagEditable: boolean;
  flaglink: boolean;
  flagBoton: boolean;

  constructor( @Inject(MAT_DIALOG_DATA) public data: any, public dialogRef: MatDialogRef<VerifDatosComponent>, private _compermservice:CompermanenteService, private _verifDatosService:VerifDatosService, private _quejaService:QuejaService) { 
		this.flaglink=false;
		this.flagIntUsuario = false;
		this.flagUpdateInfo = false;
		this.flagIntList=false;
		this.flagInfoError=false;
		this.flagEmailSent=false;
		this.flagEmailError=false;
		this.loaderror=false;
		this.flagEditable=false;
		this.flagBoton=true;
		this.flagformvisible=0;
		this.linkdescription='Ver Detalles';
  }

  ngOnInit() {
		this.QuejaCheck();
		this.LoadFrmInfo();
		this.SetSecTimerForm();
  }

  AgregarInteraccion(){
		var r = confirm("¿Esta seguro que desea enviar un correo solicitando al consumidor ingresar información adicional?");
		if (r){
			  this.flagBoton=false;
			  this.SetSecTimerBoton();
				this._verifDatosService.addDataInt(this.data.NoQueja).subscribe((retvalue)=>{
					console.log(retvalue);
					if(retvalue["reason"] == 'OK' || retvalue["reason"] == 'EMAILFAIL'){
						console.log(retvalue);
						if(retvalue["reason"] == 'OK'){
							this.flagEmailSent=true;
							this.SetSecTimerMailOk();
						}else{
							this.flagEmailError=true;
							this.SetSecTimerMailError();
						}
						this.LoadFrmInfo();
					}else{
						console.log('Rest service response ERROR.');
						this.flagInfoError=true;
						this.SetSecTimerInfoError();
					}	
				},(error)=>{
					console.log(error);
					this.flagInfoError=true;
				});
		}		
		//saveinteraccion
  }

  DetallesInteraccion(){
	  if(this.flagIntList){
		  this.flagIntList=false;
		  this.linkdescription='Ver Detalles';
	  }else{
		  this.flagIntList=true;
		  this.linkdescription='Ocultar Detalles';
	  }
  }
  	
	QuejaCheck(){
		let tempstr='';
		this._quejaService.getDataQueja(this.data.NoQueja).subscribe((retvalue)=>{
			if(retvalue["reason"] == 'OK'){
				tempstr=retvalue['value'];
				if(tempstr != null)	{
					this.lst_queja=JSON.parse('['+retvalue["value"].slice(0, -1) +']');
					console.log(this.lst_queja);
					this.flagformvisible++;
					this.lbl_numqueja=this.lst_queja[0]['quejanumero'];
					//this.flaglink=true;
					//verificar estado para permitir edicion en formulario
					if(this.lst_queja[0]['id_estado_queja']>=101 && this.lst_queja[0]['id_estado_queja']<=106)
						this.flagEditable=true;
					else
						this.flagEditable=false;
				}else{
					console.log('Información de queja no pudo ser obtenida.');
					this.flagInfoError=true;
					this.SetSecTimerInfoError();
				}				
			}else{
				console.log('Rest service response ERROR.');
				this.flagInfoError=true;
				this.SetSecTimerInfoError();
			}		
		},(error)=>{
			console.log(error);
			this.flagInfoError=true;
			this.SetSecTimerInfoError();
		});	
	}

	LoadFrmInfo(){
		let tempstr=null;
		this._verifDatosService.getInteracciones(this.data.NoQueja).subscribe((Data)=>{
			if(Data['reason'] == 'OK'){
				tempstr=Data['value'];
				if(tempstr != null && tempstr!='')	{
					this.lst_int=JSON.parse('['+tempstr.slice(0, -1) +']');
					this.flagIntUsuario=true;
				}else{
					this.lst_int=null;
					this.flagIntUsuario=false;
				}
				this.flagInfoError=false;
				console.log('*'+tempstr+'*');
				console.log(this.lst_int);
				this.flagformvisible++;
				this.SetSecTimerVarLoad();
			}else{
				console.log('Rest service response ERROR.');
				this.flagInfoError=true;
				this.SetSecTimerInfoError();
			}
		},(error)=>{
			console.log(error);
			this.flagInfoError=true;
			this.SetSecTimerInfoError();
		});
	}
	
	openFormularioQuejaRegistro(){
		console.log('entro a getFormularioQuejaRegistro');
		this._compermservice.getFormularioQuejaRegistro(this.data.NoQueja).subscribe((Data)=>{
		console.log('entro a openRegisto');
			this._compermservice.FileDownLoadChoose(Data,1);
			this.flagInfoError=false;
		},(error)=>{
			console.log(error);
			this.flagInfoError=true;
			//this.SetSecTimerInfoError();
		});
	} 

	closeDialog(){
		this.dialogRef.close();
	}

	SetSecTimerInfoError(){
		const source = timer(5000);
		const subscribe = source.subscribe(val => this.flagInfoError=false);
	}
	SetSecTimerMailOk(){
		const source = timer(5000);
		const subscribe = source.subscribe(val => this.flagEmailSent=false);
	}
	SetSecTimerMailError(){
		const source = timer(5000);
		const subscribe = source.subscribe(val => this.flagEmailError=false);
	}
	SetSecTimerForm(){
		const source = timer(15000);
		const subscribe = source.subscribe(val => this.TimerForm() );
	}
	TimerForm(){
		console.log(this.flagformvisible);
		if(this.flagformvisible<2){
			this.loaderror=true;	
			this.flagformvisible=-1;
		}
	}
	SetSecTimerVarLoad(){
		const source = timer(1000);
		const subscribe = source.subscribe(val => this.flaglink=true);
	}
	SetSecTimerBoton(){
		const source = timer(5000);
		const subscribe = source.subscribe(val => this.flagBoton=true);
	}
}
